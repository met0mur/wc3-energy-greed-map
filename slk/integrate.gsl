include("io.gsl");
include("math.gsl");
string csv = readString(openFileRead("D:/_wc3/dev/slk/TowerBaseConfig.csv"));
echoln("========ГОГОГО==========");
include("string.gsl");
array list = splitstr(csv, "\n");
array headers = splitstr(list[0],":");
array hash = array();

//формирование хеша по всем параментрам таблицы TowerBaseConfig
//в каждый парпметр вложен массив значений по индексу

array paramArray;
for(int i: headers) {
	string header = clearCommas(headers[i]);
	paramArray = array();
	hash[header] = paramArray;
	
	var lastValue;
	for(int j=1;j<size(list);j++) {
		var value = splitstr(list[j],":")[i];
		if (header == "cooldown" && value != null) {
			value = (string)((float)value / 1000);
		}
		if (header == "dpm" && value != null) {
			value = (string)((float)value / 10);
			value = floatDrop(value, 10, 1);
		}
		if (value == "\"@same@\"") {
			value = lastValue;
		}
		lastValue = value;
		if (value instanceof String) {
			value = clearCommas(value);
		}
		if (value != null) {
			paramArray[j] = value;
		}
	}
}

//кофигурачция генератопа полей юнитов и абилок

array fieldsConfig = array();
array towerFieldsList = array();
array abltFieldsList = array();
fillFields(abltFieldsList, towerFieldsList, fieldsConfig, "buildCost", "Стоимость:@ед. маны за за постройку", "bdbdf2", true, false);
fillFields(abltFieldsList, towerFieldsList, fieldsConfig, "distance", "Дальность:@ед.", "c5d0e6", false, true);
fillFields(abltFieldsList, towerFieldsList, fieldsConfig, "cooldown", "Кулдаун:@сек.", "c5d0e6", false, true);
fillFields(abltFieldsList, towerFieldsList, fieldsConfig, "damage", "Атака:@ед. урона", "ff4d00", true, true);
fillFields(abltFieldsList, towerFieldsList, fieldsConfig, "dpscc", "DPS:@ед. урона в сек.", "ff4d00", true, true);
fillFields(abltFieldsList, towerFieldsList, fieldsConfig, "attackCost", "Расход:@ед. маны за один удар", "bdbdf2", true, true);
fillFields(abltFieldsList, towerFieldsList, fieldsConfig, "mpscc", "MPS:@ед. маны в сек.", "bdbdf2", true, true);
fillFields(abltFieldsList, towerFieldsList, fieldsConfig, "dpm", "DPM:@ед. урона на 1 ед. маны", "bdbdf2", false, true);

//заполнения кофига генерачии одной строки
void fillFields (array abltFieldsList, array towerFieldsList, array fieldsConfig, string name, string line, string color, bool format, bool ablt) {
	array field = array();
	fieldsConfig[name] = field;
	field.line = splitstr(line, "@");
	if (color == null) color = "ffffff";
	field.color = color;
	field.format = format;
	towerFieldsList[size(towerFieldsList)] = name;
	if (ablt) abltFieldsList[size(abltFieldsList)] = name;
}


include("dialog.gsl");
//Fetch the map to be applied on, either from the command line arguments or from a dialog
string mapFile = (@args[0] == null?fileDialog("Choose a map",@inputPath,".w3x"):@args[0]); 

//Load the map
Map map = loadMap(mapFile,false,true);

String nn = "\n";
//
for(int j=1;j<size(list)-1;j++) {
	int level = (int)hash.level[j];
	
	//
	// генерация текста
	//
	String name = hash.unam[j] + " [уровень #" + (string)level + "]";
	String ubertip = "";
	if (level == 1) ubertip =  ubertip + hash["utup"][j] + nn + nn
	
	for(int k=0;k<size(towerFieldsList);k++) {
		var fieldName = towerFieldsList[k];
		var fieldConf = fieldsConfig[fieldName];
		string value = hash[fieldName][j];
		ubertip = ubertip + writeField(value, fieldConf.line, fieldConf.color, fieldConf.format);
		string lastValue = hash[fieldName][j-1];
		ubertip = ubertip + differenceText(level, value, lastValue) + nn;
	}
	
	var additionalLine;
	if (hash.abval1[j] != null && hash.abval1[j] != "") {
		var value = hash.abval1[j];
		var lastValue = hash.abval1[j-1];
		additionalLine = writeField(hash.abval1[j], splitstr(hash.abline1[j], "@"), "6767e0", true);
		ubertip = ubertip + additionalLine + differenceText(level, value, lastValue) + nn;
	}
	
	echoln(ubertip);
	ubertip = ubertip + nn + "Для постройки и дальнейшей работы требует подключения к сети." + nn;
	
	String abltname = hash.anam[j] + " [уровень #" + hash.level[j] + "]";
	
	String abltubertip = abltname + nn + hash["utup"][j] + nn + nn;
	for(int k=0;k<size(abltFieldsList);k++) {
		var fieldName = abltFieldsList[k];
		var fieldConf = fieldsConfig[fieldName];
		var value = hash[fieldName][j];
		abltubertip = abltubertip + writeField(value, fieldConf.line, fieldConf.color, fieldConf.format);
		var lastValue = hash[fieldName][j-1];
		abltubertip = abltubertip + nn;
	}
	if (additionalLine != null) abltubertip = abltubertip + additionalLine + nn;
	
	//
	// запись значений
	//
	
	string objectID = hash.unitid[j];
	array targetObject = map.objects[objectID];
	if (targetObject != null) {
		writeString(map, targetObject, "Name", name);
		writeString(map, targetObject, "Ubertip", ubertip);
		
		targetObject.rangeN1 = (int)hash.distance[j];
		targetObject.manaN = (int)hash.capacity[j];
		targetObject.HP = (int)hash.hp[j];
		targetObject.cool1 = (float)hash.cooldown[j];
	}
	
	objectID = hash.abilid[j];
	targetObject = map.objects[objectID];
	if (targetObject != null) {
		writeString(map, targetObject, fieldNameLevel("Tip", level, true), abltname);
		writeString(map, targetObject, fieldNameLevel("Ubertip", level, true), abltubertip);
		
		var abdmg = hash.abdmg[j];
		if (abdmg != null && strlen(abdmg) > 0) {
			abdmg = fieldNameLevel(abdmg, level, false);
			targetObject[abdmg] = (int)(hash.damage[j]);
		}
		
		var abprop1 = hash.abprop1[j];
		if (abprop1 != null && strlen(abprop1) > 0) {
			abprop1 = fieldNameLevel(abprop1, level, false);
			targetObject[abprop1] = (int)(hash.abval1[j]);
		}
		
		targetObject[fieldNameLevel("Cost", level, false)] = (int)hash.attackCost[j];
		targetObject[fieldNameLevel("Cool", level, false)] = (float)(hash.cooldown[j]) - 0.1;
	}
}

saveMap(map,mapFile);

//сравнительные данные 
string differenceText (int level, string value, string lastValue) {
	string retval = "";
	if (level != 1 && value != lastValue) {
			float koef = (float)value / (float)lastValue;
			var word;
			if (koef > 1) {
				word = wrapColor("больше", "fcbeb6");
			} else {
				word = wrapColor("меньше", "c5c5e3");
			}
			if (koef >= 2 || (koef * 10) <= 5) {
				if ((koef * 10) <= 5) {
					koef = (float)lastValue / (float)value;
				}
				retval = retval + " (" + word + " в " + wrapColor(floatDrop((string)koef, 3, 10), "fbec5d") + quatifiers((int)koef, " раз", " раза") + ")";
			} else {
				var diff = abs((float)value - (float)lastValue);
				retval = retval + " (" + word + " на " + wrapColor(floatDrop((string)diff, 3, 10), "c5e384") + ")";
			}
		}
	return retval;
}

//сформировать строку 
string wrapColor (string text, string color) {
	//return text;
	return "|c00" + color + text + "|r";
}

//сформировать строку 
string writeField (string value, array line, string color, bool format) {
	var result = "";
	var paramName = line[0];
	var spaces = "";
	var len = 15-strlen(paramName);
	for(int i=0;i<len;i++) {
		spaces += " ";
	}
	result = wrapColor(line[0], color) + spaces;
		if (format) {
			result = result + wrapColor(numberFormat((int)value), color);
		} else {
			result = result + wrapColor(value, color);
		}
		result = result + " " + line[1];
	return result;
}

//генерация имени поля с левелом
string fieldNameLevel (String fieldName, int level, bool shift) {
	if (shift && level == 1) return fieldName;
	if (!shift) return fieldName + (string)level;
	return fieldName + (string)(level - 1);
}

//запись результата генерации в объект карты
void writeString (Map map, String objectId, String fieldName, String text) {
	string fieldContent = map.objects[objectId][fieldName];
	if (substr(fieldContent, 0, 7) == "TRIGSTR") {
		int stringID = (int)substr(fieldContent, 8);
		map.internal.trigstrs[stringID] = text;
	} else {
		echoln("writeString error " + objectId + "." + fieldName + " = " + fieldContent);
	}
}

void writeString (Map map, array targetObject, String fieldName, String text) {
	string fieldContent = targetObject[fieldName];
	if (substr(fieldContent, 0, 7) == "TRIGSTR") {
		int stringID = (int)substr(fieldContent, 8);
		map.internal.trigstrs[stringID] = text;
	} else {
		echoln("writeString error " + objectId + "." + fieldName + " = " + fieldContent);
	}
}

//очистка строки от кавычек
String clearCommas (String input) {
	if (substr(input, 0, 1) == "\"") {
		return substr(input, 1, strlen(input)-1);
	}
	return input;
}

//форматирование чисел
string numberFormat (int input) {
	String s = (String)input;
	Int leng = strlen(s);
	Int num = leng / 3;
	String result = "";
	int i;
	for(i=0;i<num;i++) {
		result = " " +  substr(s, leng - (i+1) * 3, leng - i * 3) + result;
	}
	result = substr(s, 0, leng - i * 3) + result;
	if (substr(result, 0, 1) == " ") {
		result = substr(result, 1);
	}
	return result;
}

//числительное
string quatifiers (string input, string formOne, string formTwo) {
	int numb = (int)substr(input,strlen(input) - 1);
	if (numb == 2 || numb == 3 || numb == 4) return formTwo;
	return formOne;
}

//округление
string floatDrop (string value, int min, int after) {
	 if (after > 1) {
		value = (string)((float)((int)(((float)value * after + 0.5)))/after);
	} 
	if ((float)value > min) {
		return (string)((int)((float)value + 0.5));
	}  else if ((float)value - (int)(float)value == 0) {
		return (string)(int)(float)value;
	}
	return value;
}